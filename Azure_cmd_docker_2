YAML 데이터 직렬화에 쓰이는 포맷/양시 중 하나

kubenetes 설치 (local보다 azure 가상신에서 해야 속도가 빠름)


curl -LO https://storage.googleapis.com/minikube/releases/v1.22.0/minikube-linux-amd64 설치 1

sudo install minikube-linux-amd64 /usr/local/bin/minikube 로 설치 2

minikube --help 로 설치 확인

CLI 도구의 설치 

curl -LO https://dl.k8s.io/release/v1.22.1/bin/linux/amd64/kubectl 

sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl 로 도구 설치 완료

kubectl --help 로 설치 확인
==============================================================================================
minikube start --driver=docker 로 docker 드라이버로 kube 시작

sudo usermod -aG docker $USER && newgrp docker 로 부족한 요소 채우기

minikube status 로 현재 상태 확인

kubectl get pod 로 리소스 확인

kubectl get pod -n kube-system 로 kube-system이 사용하는 pod 확인

minikube delete 로 삭제 (기능 설명용으로 시연)

minikube start --driver=docker 로 kube 다시 시작

cd .. 로 이동 

vi pod.yaml 로 새로운 yaml 파일 생성 

i 로 vi 애디터를 insert 모드로 변경


apiVersion: v1 # kubernetes resource 의 API Version 

kind: Pod # kubernetes resource name 

metadata: # 메타데이터 : name, namespace, labels, annotations 등을 포함 

  name: counter 

spec: # 메인 파트 : resource 의 desired state 를 명시 

  containers: 

  - name: count # container 의 이름 

    image: busybox # container 의 image 

    args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'] 
이후 esc :wq 로 작성 후 빠져나오기

 kubectl -f pod.yaml		 kubectl apply -f pod.yaml 로 pod/counter 생성 활성

kubectl get pod 로 pod 생성 확인

kubectl get pod		kubectl get pod -n kube-system 로 pod 확인

kubectl get pod -A 전체 pod 확인

==============================================================================================
오랜 시간 접속 안 했다면 minikube status 로 상태 확인

kubectl get pod로 전체 pod 잘 돌아가는지 확인

kubectl get pod counter 로 counter 라는 pod 만 검색

kubectl describe pod 로 각각의 pod를 구체적으로 확인 가능

kubectl get pod -o wide 로 더 많은 정보를 알 수 있다(네트워크 세팅 시 자주 사용)

kubectl get pod -w 로 지속적으로 관찰 Ctrl+c로 빠져나오기

kubectl logs counter 로 log 확인

kubectl logs counter -f 로 지속적으로 나오는 값 보기

kubectl exec -it counter /bin/bash 로 접속

kubectl delete pod counter 로 pod 삭제 (지금은 안 씀)

kubectl delete -f pod.yaml 로 해당 스펙의 객체 삭제

vi deployment.yaml 로 새로 생성

여러가지 적고
(
apiVersion: apps/v1 # kubernetes resource 의 API Version 
kind: Deployment # kubernetes resource name 
metadata: # 메타데이터 : name, namespace, labels, annotations 등을 포함 
  name: nginx-deployment 
  labels: 
    app: nginx 
spec: # 메인 파트 : resource 의 desired state 를 명시 
  replicas: 3 # 동일한 template 의 pod 을 3 개 복제본으로 생성합니다. 
  selector: 
    matchLabels: 
      app: nginx 
  template: # Pod 의 template 을 의미합니다. 
    metadata: 
      labels: 
        app: nginx 
    spec: 
      containers: 
      - name: nginx # container 의 이름 
        image: nginx:1.14.2 # container 의 image 
        ports: 
        - containerPort: 80 # container 의 내부 Port 
 

vi deployment.yaml
) 아니면
(
apiVersion: v1 # kubernetes resource 의 API Version 

kind: Pod # kubernetes resource name 

metadata: # 메타데이터 : name, namespace, labels, annotations 등을 포함 

  name: counter 

spec: # 메인 파트 : resource 의 desired state 를 명시 

  containers: 

  - name: count # container 의 이름 

    image: busybox # container 의 image 

    args: [/bin/sh, -c, 'i=0; while true; do echo "$i: $(date)"; i=$((i+1)); sleep 1; done'] # 해당 image 의 entrypoint 의 args 로 입력하고 싶은 부분 
)이거

 esc :wq 사용해 빠져나오기

kubectl apply -f deployment.yaml 로 deploy 적용

kubectl get pod 로 pod 정보 확인	kubectl delete -f deployment.yaml 후

kubectl apply -f deployment.yaml 와 kubectl get pod를 빨리 입력하면 만드는 걸 볼 수도 있음

kubectl get deployment

kubectl delete pod "해당 kube의 Name" 로 특정 kube를 삭제 가능

kubectl get pod 로 kube 목록 확인

kubectl scale deployment/nginx-deployment --replicas=20 로 길이 조정(20개)-바쁜 시간

kubectl get pod 로 kube 생성 목록 확인

kubectl scale deployment/nginx-deployment --replicas=1 로 길이 조정(1개)

kubectl get pod 로 kube 삭제 목록 확인

kubectl delete -f deployment.yaml 로 deployment 삭제

kubectl apply -f deployment.yaml 로 deployment 다시 생성

kubectl get pod 로 pod 목록 확인

kubectl get pod -o wide 로 IP 주소 확인 가능

curl -X GET "IP주소" -vvv 로 연결 시도(실패함)

ping "IP주소" 로 host가 살아 있는지 확인(이래도 답 없으면 접근 불가한 IP 주소)

minikube ssh 로 mini kube 접속

curl -X Get "IP주소" -vvv 로 접속 시도

exit 로 minikube 빠져나오기

바깥쪽에서 안쪽 pod로 적속 가능한 서비스 생성
(
vi service.yaml 로 yaml 생성 후 i로 입력 모드

apiVersion: apps/v1 # kubernetes resource 의 API Version 
kind: Deployment # kubernetes resource name 
metadata: # 메타데이터 : name, namespace, labels, annotations 등을 포함 
  name: nginx-deployment 
  labels: 
    app: nginx 
spec: # 메인 파트 : resource 의 desired state 를 명시 
  replicas: 3 # 동일한 template 의 pod 을 3 개 복제본으로 생성합니다. 
  selector: 
    matchLabels: 
      app: nginx 
  template: # Pod 의 template 을 의미합니다. 
    metadata: 
      labels: 
        app: nginx 
입력 후 esc :wq로 빠져나온다

이후 kubectl apply -f service.yaml 로 서비스 생성
)

kubectl get service 로 활성화 및 IP 확인

curl -X Get " CLUSTER-IP":80 로 확인

Ctrl+c 로 정지 후 crul -X GET $(minikube ip):80 로 접속 시도 
(접속 불가 - 가상 환경에서 만든 경우 방화벽이 생성되기 때문에 접속 불가)

Azure CLI 설치 후 cmd에서 az로 설치 확인, az login으로 로그인 환경에서 로그인

로그인 후 cmd에서 다양한 정보 확인, az group list로 그룹 목록 확인

az group create --name tiger --location=westus 형식으로 새로운 그룹 생성

az ad group list 로 그룹 확인, 

az ad group create --display-name MyDisplay1 --mail-nickname MyDisplay1 형식으로 그룹 생성

az ad group delete --group MyDisplay1 로 그룹 삭제

ubuntu와 docker를 사용한 가상환경 접속
cmd에서 ubuntu를 사용해 생성한 예제 명령을 실행해 접속

이후
sudo apt-get update 		sudo apt-get upgrade 

sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release

안 되면(sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg \ lsb-release )

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io 를 입력해 밑 준비

이후

sudo docker run hello-world		sudo usermod -a -G docker $USER 

sudo service docker restart		docker pull ubuntu:18.04 

docker images	docker ps		docker ps -a 

docker run -it --name demo1 ubuntu:18.04 /bin/bash 

docker run -it -d --name demo2 ubuntu:18.04 

docker ps 		docker exec -it demo2 /bin/bash 

docker run --name demo3 -d busybox sh -c "while true; do $(echo date); sleep 1; done" 

docker logs demo3 	docker logs demo3 -f 		docker stop demo3 

docker stop demo2 	docker stop demo1 	docker rm demo3 		docker rm demo2 

docker rm demo1 		docker images 

# busybox, ubuntu 가 있는 것을 확인할 수 있을 것. 

docker rmi ubuntu 
==============================================================================================
이후 
cd $HOME으로 이동	ls -ai로 사용 가능 요소 확인		mkdir docker-practice 생성 ls 입력해 확인

cd docker-practice/ 입력 후 touch Dockerfile 입력해 새 빈 파일 생성, ls 입력해 생성 확인,
==============================================================================================
간단한 Dockerfile 작성
cat Dockerfile	ls로 생성 확인		vi Dockerfile로 편집 모드 준비	i눌러 편집 모드로 변환

FROM ubuntu:18.04로 실행 시점 설정	RUN apt-get update로 업데이트		

CMD ["echo", "Hello Docker"] DOCKER CONTAINER 시작 시, "Hello Docker" 출력

esc	:w를 사용해 작성한 docker파일 확인		:wq로 작성 후 나가고 cat Dockerfile 입력해 잘 만들었는지 확인
==============================================================================================
sudo docker build -t my-image:v1.0.0 . 입력해 어디에 어떤 이름으로 만들지 설정 후 build 작업 실시

ls -al로 어떤 요소가 있는지 확인	sudo docker image로 어떤 이미지가 있는지 확인
==============================================================================================
Docker Image 저장소-azure에서 Docker의 resoritory를 만들어 저장

sudo docker images|grep my-image를 파이프라인을 통해 특정 키워드가 있는 부분을 골라낸다

sudo my-image:v1.0.0으로 docker 실행
==============================================================================================
Docker 이미지 관리 서버 생성

sudo docker run -d -p 5000:5000 --name registry registry 로 registry라는 이미지 관리 서버 생성

sudo docker ps로 잘 생성 됐는지 확인

sudo docker tag my-image:v1.0.0 localhost:5000/my-image:v1.0.0 로 두 이미지 정보 tagging

sudo docker images 로 이미지 생성 확인(IMAGE ID를 중심으로 기억)

sudo docker push localhost:5000/my-image:v1.0.0 로 push진행

curl 로 네트워크 통신 	curl -X GET http://localhost:5000/v2/_catalog 로 배포 가능토록

sudo docker login 로 dockerhub와 연결

sudo docker tag my-image:v1.0.0 docker아이디/my-image:v1.0.0 로 내 dockerhub로 이미지 tag

sudo docker push docker아이디/my-image:v1.0.0 로 dockerhub로 이미지 push

dockerhub로 들어가서 이미지 push 여부 확인

sudo docker rmi image_name 로 local에서 잘 못 만든 이미지 삭제

37일차(리눅스 환경 구축-web app), flask 또는 fast api

공식 자습서
https://learn.microsoft.com/en-us/azure/developer/python/python-web-app-github-actions-app-service?tabs=azure-cli 

샘플 github
https://github.com/Microsoft/python-sample-vscode-flask-tutorial 
의 /hello_app/views.py 파일에서 어떤 기능을 하는지 공부

참고 자료(fast api 자습서)
https://wikidocs.net/175092

MVC(Model View Controller) 형식으로 작업, 유지/보수
=======================================================================================
github, 웹 앱을 사용한 CICD(Continuous Integration/Continuous Deployment-github)https://seosh817.tistory.com/104

샘플 github fork 이후 작업 시작

az --help 로 각종 정보 확인

az login 로 로그인 

multiple account 발견 시 az logout 후 다시 az login

cd documents 로 이동

fork 한 샘플 github 링크 복사 후 git clone 작업 실행

cd python-sample-vscode-flask-tutorial 로 해당 경로로 이동

dir 로 각종 파일 목록 확인(이건 사실 50개의 명령어를 수행함)

(az webapp 로 웹앱 관련 명령어 나열/az vm은 가상환경 관련 명령어 나열)

az webapp up --name labuser5webapp --location westus --resource-group RG5 --runtime "PYTHON:3.9" 로 웹 앱 이름, 위치, 리소스 그룹,런타임 설정한 웹 앱 생성

안 되면 누가 이미 무료 요소를 가져간거니 sku 지정 
az webapp --help 로 sku 명령어 확인

az webapp up --name labuser5webapp --location westus --resource-group RG5 --runtime "PYTHON:3.9" --sku B1 로 sku 지정한 새로운 환경 구축

생성된거는 본인이  지정한 Microsoft Azure 리소스 그룹에서 확인 가능 ex) RG5

생성한 webapp의 배포 센터에 들어간 후 웹 앱 설정 (대/소문자, 띄어 쓰기 주의) 웹 서버마다 스타트업 파일 지정
az webapp config set --resource-group RG5 --name labuser5webapp --startup-file startup.txt 

배포 설정 
az webapp deployment github-actions add --repo "jaekim3220/python-sample-vscode-flask-tutorial" --resource-group RG5 --branch master --name labuser5webapp --login-with-github

git과 연결
az webapp deployment github-actions add --repo jaekim3220/python-sample-vscode-flask-tutorial --resource-group RG5 --name labuser5webapp --login-with-github

az webapp deployment github-actions add --repo "jaekim3220/python-sample-vscode-flask-tutorial" --resource-group RG5 --branch master --name labuser5webapp --login-with-github

Not Found 나와도 진정

azure 리소스 그룹으로 가서 webapp에서 배포 센터의 로그로 이동, 활성화 확인

이후 webapp의 개요에서 url에 접속 웹 페이지 확인

변화를 일으키기 위해 python-sample-vscode-flask-tutorial/hello_app/templates/의 home 수정

Home 앞에 자기 이름 적어고 commit 이후 actions 실행해 변화 확인 이후 다시 웹 페이지 확인

desktop 버전으로 만들기 Microsoft Power BI Desktop 다운로드 후 사용

데이터 가져오기로 원하는 자료 가져오기 (예제 데이터 로드->샘플 데이터 로드)

이후에는 인터넷을 찾아보자

=================================================================================================================================================================================================================

37일차_2(ACR&AKS, docker 생성/배포) 

https://learn.microsoft.com/ko-kr/azure/aks/tutorial-kubernetes-prepare-app 참고

작업을 위해 리눅스 머신 생성(ubuntu server 20.04 lts)
(가상머신이름 : labuser5ubuntu)

CMD

ssh jaekim@20.249.218.49

sudo apt-get update 		
sudo apt-get upgrade 

sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release

안 되면(sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg \ lsb-release )

curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io 를 입력해 밑 준비

이후

sudo docker run hello-world		
sudo usermod -a -G docker $USER 

sudo service docker restart	

git clone https://github.com/azure-samples/azure-voting-app-redis.git 으로 git 다운

ls 로 다운받은 코드 확인 

cd로 다운받은 코드로 이동

cat docker-compose.yaml 로 파일 열어보기 (여기서 azure-vote-back:은 백엔드, azure-vote-back:는 프론트엔드)

docker-compose -d 로 해당 야믈 파일을 찾아 docker-compose 시도

sudo apt-get install docker-compose 로 docer-compse 설치

docker-compose 로 도움말, 설치 확인

docker-compose up -d 로 야믈 파일 탐색, 이미지 생성

에러 발생 시 접속 끊고 다시 시도
exit 한 다음 ssh jaekim@20.249.218.49

sudo apt-get install docker-compose 로 docer-compse 설치

docker-compose 로 도움말, 설치 확인

docker-compose up -d 로 야믈 파일 탐색, 이미지 생성(wrning 무시)

docker images 로이미지 생성 확인

docker ps로 이미지 접속 가능한 포트 확인 (0.0.0.0:8080->80/tcp) 80번 포트 사용가능

azure 포탈의 네트워킹으로 가서 인바운드 포트 규칙 추가(대상 포트 범위 80, 8080 각각 추가), 아웃바운드 포트 규칙 추가(대상 포트 범위 80, 8080 각각 추가)로 포트 허용한 이후  NIC 공용 IP 번호:8080으로 사이트 접속
-> 리눅스 서버 방화벽 풀어서 접속하는 과정(이 과정은 docker가 돌아가는지 확인하는 과정 실제는 클라우드에 있는 서비스에서 확인)

(sudo apt install azure-cli)

az acr create --resource-group RG5 --name labuser5acr --sku Basic 로 azure container registry 생성

az acr login --name labuser5acr

azure cli 설치 https://learn.microsoft.com/ko-kr/cli/azure/install-azure-cli-linux?pivots=apt 참고

az login 로 리눅스 머신 acr 연결

docker images로 이미지 확인

az acr login --name labuser5acr 로 acr 정보 할당, acr 접속 (로그인 성공)

az acr list 는 전체 list 확인 가능(나 뿐만 아니라 모든 list)

az acr list --resource-group RG5 로 리소스 그룹 list만 확인, loginServer 주소 확인

az acr list --resource-group RG5 --query "[].{acrLoginServer:loginServer}" 로 로그인 서버만 찾는다


az acr list --resource-group RG5 --query "[].{acrLoginServer:loginServer}" --output table 로 더 예쁘게 출력

docker images 로 이미지 확인

docker 이미지 REPOSITORY:태그 acr주소/이미지 REPOSITORY:태그 
(docker tag mcr.microsoft.com/azuredocs/azure-vote-front:v1 labuser5acr.azurecr.io/azure-vote-front:v1) 로 주소 확인 후 tag

docker images 로 tagging 확인

docker push acr주소/이미지 REPOSITORY:태그
(docker push labuser5acr.azurecr.io/azure-vote-front:v1) 로 docker push

az acr repository list --name labuser5acr 로 본인 push 확인

az acr repository list --name labuser5acr --output table 로 테이블 형태로 결과 확인

az acr repository show-tags --name labuser5acr --repository azure-vote-front --output table 로 이미지 tag 확인

az aks create --resource-group RG5 --name labuser5aks --node-count 2 --generate-ssh-keys --attach-acr labuser5acr


sudo az aks install-cli 로 Kubernetes CLI 설치

az aks get-credentials --resource-group RG5 --name labuser5aks 로 접속에 필요한 인증서 가져오기

kubectl get nodes 로 확인

